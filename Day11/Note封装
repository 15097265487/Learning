 面向对象的特征之一：封装
 * 	一、问题引入：
 * 	  当我们创建了一个对象之后，我们可以通过对象名对对象的属性进行赋值
 * 	  赋值操作只受到属性的数据类型的限制
 * 	  除此之外，没有其他限制条件，但实际问题中我们往往需要给属性加入额外的限制条件
 * 	  这个条件就不能再属性声明时体现，我们只能通过方法进行条件的添加。如setAge（int i）
 * 	  时。我们需要避免用户在使用“对象名.属性”给属性赋值
 *	  属性的声明设置成私有的private（private只可以在本类中使用）------->此时，针对属性就体现了封装性
 * 	
 * 	 get set:
 * 			set()是给属性赋值的，get()是取得属性值的 
 * 	二、封装性的体现
 * 	  将属性私有化，提供公开的方法来访问属性，不对外暴露的私有方法
 * 		xxx setXxx(...)   void
 * 			getXxx()      无参有返回值
 * 	  单列模式
 * 	三、封装性的体现，需要访问修饰符
 * 	 ①. 4修饰符：private  public  缺省      protected
 * 	 ②. 4种权限修饰符用来修饰类及类的内部结构
 * 		属性   方法   构造器   内部类
 * 	 ③. 修饰符：public 缺省
 * 		4种权限修饰符用来修饰类及类的内部结构：属性   方法   构造器   内部类
总结封装性：
 * 	java提供4种权限修饰符用来修饰类及类的内部结构
 * 	体现类及类的内部结构在被调用时的可见性
 
 类的成员之构造方法（构造方法）
	 * Constructor
	*一、构造起的作用
	 * 	1、创建对象
	 * 	2、初始化对象信息
	 * 二、格式
	 * 	构造器名与类名一致
	 * 	权限修饰符      类名(参数列表){
	 * 			}
	 * 三、使用
	 * 	1、如果没有定义类的构造器的话，系统默认提供一个无惨的构造器
	 * 	2、如果已经定义了类的构造器，则不提供默认的无参构造器
	 * 	3、一个类中定义了多个构造器，彼此构成重载
	 * 	4、一个类中至少有一个
	 
总结：
	 * 	①：默认初始化值：   int age;
	 * 	②；显示初始化：       int age = 1;
	 * 	③：构造其中初始化：   Per p = new Per(12);
	 * 	④：通过“对象名.方法”（对象名.属性）方式赋值
	 * 
	 * 拓展：所谓javaBean， 是指符合如下标准的Java类：
	 * 	类是公共的
		      有一个无参的公共的构造器
        有属性， 且有对应的get、 set方法
	 * 	      用户可以使用JavaBean将功能、 处理、 值、 数据库访问和其他任何可以用Java代码创造的对象进行打包， 并且其他的开发者可以通过内部的JSP页面、 Servlet、 其他JavaBean、 applet程序或者应用来使用这些对象。 用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能， 而不用关心任何改变。

* this关键字使用
 * 1.this可以用来修饰、调用属性、方法、构造器
 * 2.this修饰属性 方法
 * 		this理解为：
 * 		当前的对象 或 当前正在创建的对象
 * 	2.1 在类的方法中，通过如下方式调用对象的属性和方法
 * 		this.属性
 * 		this.方法
 * 	 
 * 	......
 * 3.this调用构造器	
 * 		this(参数列表)
 
 