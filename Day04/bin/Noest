循环结构：
		 * 顺序结构：从上往下逐行执行
		 * 分支结构：有条件的执行某语句一次
		 * 循环结构：有条件的执行某语句块一次或多次
		 * 
		  * 分支结构格式：
		 * 1）if(条件表达式){...}
		 * 2）if(条件表达式){
		 *   }else{
		 *       //代码块
		 *   }
		 *    
		 *3）if(条件表达式){
		 *        //代码块
		 *	}else if(条件表达式){
		 *         //代码块
		 *	}else if(条件表达式){
		 *         //代码块
		 *	}else{
		 *         //代码块
		 *  }
		 *  
		 *  switch(表达式){byte short int char 枚举  String
		 
		 *  case value1:
		 *  case value2:
		 *  		break;
		 *  default:
		 *  }
		    当表达式与value值匹配时执行switch结构
		   直到遇到break或直行至switch末尾时，switch...case执行结束
		 break：跳出switch..case结构
		 *  
		   凡是可以使用switch结构的都可以转换成if-else结构，反之、不成立
1.break后不可写代码


		 * 循环结构：
		 * 	有条件的执行某语句一次或者多次
		 * 循环三要素：
		 * 	循环变量的初始化
		 * 	循环条件（基于循环变量）
		 * 	循环变量的改变（向着循环结束的方向改变）
		 * 	(循环体)
		 * 循环变量：
		 * 	再循环过程中反复改变的量
		 * 1 2 4 3 243 243 243....2循环条件为假时结束
		 * 
		 * 变量作用域：
		 * 从声明他开始到包含他最近的大括号
		 * for(int j=1,i=99;j<2&&i<100;j++,i++)
		 * 
		 * m+=2
		 * m=m+m
		 * m++
		 * 
		 * //break后不可写代码
		 break只能用于switch语句和循环语句中。
		 continue只能用于循环语句
		    二者功能类似，但continue是终止本次循环，break是终止本层循环。
		 break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句。
		   标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。
		   很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它
		   但使程序容易出错。java中break和continue是不同的于goto的。
		 
		 
		 return并非专门用于结束循环的，他的功能是结束一个方法。，当一个方法执行到一个return语句时，这个方法将被终止。
		   与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内。
		 
		 * 1初始化部分
		 * while(循环条件部分){
		 * 	循环部分
		 * 	迭代部分
		 *  }
		 * 只要布尔表达式为 true，循环就会一直执行下去。 
	 	* while( 布尔表达式 ) {
  			//循环内容
	   	}








