面向对象之二：继承性
 *	一、继承性的好处：
 *		①减省代码的冗余，提高代码的复用性
 *		②便于程序的扩展
 *		③为了多态的使用，提供了前提
 *	二、继承的格式
 *		首先有子类
 *		class A extends B{
 *
 *		}
 *		A:是子类/派生类 subclass
 *		B:是父类 超类 基类  super class
 *	三、继承性的体现
 *		1.一旦子类A继承父类B之后，就获取了父类的所有属性和方法，特别的，父类中声明为private的属性和方法，子类继承父类以后
 *		任然认为获取了父类中私有的结构。只是受到封装性的影响，使得子类不能直接调用父类
 *		2.一旦子类A继承父类B之后，还可以声明自己特有的属性和方法，实现功能拓展
 *	四、继承性的规定：
 *		1.一个类可以被多个子类继承（一个父亲可以有多个儿子）
 *		2.单继承：一个类只能有一个父类（一个儿子只能有一个父亲）
 *		3.子父类是一个相对的概念
 *		4.子类直接继承的父类称为：直接父类、间接继承的父类称为：间接父类
 *		5.子类继承父类后，则可以获取了直接父类及间接父类中声明的方法和属性
 *		6.如果一个类没有继承任何类，那么它的父类为Object，所有的类（除了Object类）直接继承或间接继承Object类                               java.lang.Object
 *		所有的类都具备Object类声明的功能
 
 方法的重写：
 * 		1.子类继承了父类以后，可以对父类中的同名同参的方法进行覆盖操作（重写/覆盖）
 * 		2.应用：
 * 		3.重写规定
 * 			方法声明格式：修饰符  返回值类型  方法名(形参列表){
 * 							方法体
 * 					}
 * 			①方法名和参数列表必须一致，
 * 			②访问权限修饰符                  子类重写的权限修饰符不小于( >= )父类被重写的访问权限修饰符
 * 				特殊方法：private修饰的方法子类不能重写
 * 			③返回值类型：
 * 				父类被重写的方法返回值类型为void则子类重写的方法为void
 * 				父类被重写的方法返回值类型为A类， 则子类重写的方法为A类或者A的子类
 * 				父类被重写的方法返回值类型为基本数据类型，则返回值类型必须是相同的
 * 				父---------------子
 * 				父void----->子void
 * 				A类----------------->A类或A的子类
				double------->double(基本)
			④异常：子<=父
				子类抛出的议程类型不大于父类抛出的异常			
 * 			如果方法为static修饰不构成重写（静态的）
 * 
 * 			区分：overload和override的区别-----》方法名相同，
 
 super关键字的使用：
 * 	1.super理解为：父类的
 * 	2.super可以调用：方法、属性、构造器
 * 		使用：
 * 			1.调用属性、方法：    语法：super.方法、super.属性
 * 			    1.1当子类和父类中定义了同名的属性时，我们想在子类中访问父类中声明的属性
 * 			   	         则必须显示的使用“super.属性”的方式来表示此时调用的是父类的属性。
 * 				1.2super.方法
 * 				         当子类重写了父类中的方法，但想在子类中访问父类的方法，
 * 				         则必须显示的使用“super.方法”来表示调用的是父类中被重写的方法
 * 			2.super调用构造器		
 * 				①语法：super(参数列表);
 * 				②super(参数列表);   必须声明在子类构造器的首行
 * 				③在构造器中，super（参数列表）和this.（参数列表）只能二选一，不能同时出现
 * 				④在构造器的首行，如果没有显示的声明super（参数列表）或this（参数列表）则默认调用父类的无参构造器
 * 				⑤在类的构造器中，至少有一个类的构造器中使用类super(参数列表);
 
 
 
 
 
 
 