	 * void     println();
	 * void     print("");必须有参数
	 * xxx      s.nextXxx();
	 * double   Math.random();
	 * void     Arrays.sort(int[] a);
	 * T[]      Arrays.copyOf(original, newLength)
	 * void     System.arraycopy(src, srcPos, dest, destPos, length);
	 * 
一个方法尽量只做一件事
	 * ①方法：   封装一个特定的逻辑功能
	 * 		方法和方法之间是并列的关系，不能在方法中定义方法
	 * ②语法
	 * 	     修饰词，返回值类型，方法名(方法名){
	 * 		//方法体
	 *   }
	 * ③方法的使用
	 *   有参必须传参，参数数据类型一致
	 *   
	 * ④return:
	 *   	适用范围：方法体中
	 *   	作用：
	 *   		①return;结束方法
	 *   		②return 数据;
	 *   			针对于方法有返回值类型的方法，使用return返回所要的数据
	 *   		注意：return关键字后面不可有内容
	 * ⑤返回值类型  
	 *   通常情况下没有返回值则不需要return，如果使用return就表示结束方法
	 *   
	 * 	 static final abstract来修饰方法，
	 * 	 Java中的4中权限修饰符：private public 缺省protected
	 
	 
一维数组：
	 * 			①一维数组的声明初始化
	 * 				int arr[] = {};
	 * 			②访问数组指定位置元素
	 * 			③获取数组长度
	 * 			④遍历数组
	 * 			⑥数组元素默认初始化
	 * 			⑦内存解析
	 * 			⑧数组的复制
	 * 				Arrays.copyof(原数组，数组的长度)
	 * 				System.arraycopy(原数组, 原数组的下标, 新数组, 新数组的下标, 要复制的元素的个数);
	 * 			⑨数组的排序：
	 * 				Arrays.sort(arr);需要接收，升序
	 * 				冒泡排序：for(int i=0;i<arr.lenght-1;i++){外层控制的轮数
	 * 						for(int j=0;j<arr.lenght-i-1;j++){里层控制的次数，j初始值为0，下标
	 * 							if(arr[j]<arr[j+1]){
	 * 							int t=arr[j];
	 * 							arr[j]=arr[j+1];
	 * 							arr[j+1]=t;
	 * 							}
							}
	 * 					}
	 * 
	 * 			⑩数组的赋值（数组间）
	 * 				int[] arr1 = new int[10];
	 * 				int[] arr2 = arr1;
	 * 				arr2[0] = 18;
	 * 				arr1[0] =?//18
	 * 				arr1 arr2指向同一个地址，操作的是同一组数据
	 * 			int[] arr1 = new int[]{1,2,3,4};
	 * 			int[] arr2 = new int[]{1,2,3,4};
	 * 			arr1=arr2?// f 地址不同
	 * 
	 * 
2.二维数组的使用：
	 * 			①二维数组的声明初始化
	 * 				int[][] arr;int arr[][];int[] arr[];
	 *				int[][] arr = new int[3][2];
	 *				int[][] arr = new int[3][];//int[] a;null
	 *   			arr[0] = new int[5];
	 *				int[][] arr = new int[][] {{1},{1,2},{}};
	 *				int[][] arr = {{1,3},{1,2},{6,8,10}};
	 * 			②访问数组指定位置元素
	 * 				arr[0]---类型int[]----打印时输出地址/null
	 * 				arr[0][1]----类型int---打印时输出数组元素默认值或者空指针异常或打印的值
	 * 			③获取数组长度
	 * 				arr.lenght
	 * 				arr[0].lenght
	 * 			④遍历数组
	 * 				for(int i=0;i<arr.lenght-1;i++){
	 * 					for(int j=0;j<arr[i].lenght;j++){
	 * 						arr[i][j]
	 *     }
	 * }
	 * 			⑥数组元素默认初始值
	 * 				int[][] arr = new int[3][2]
	 * 					arr[0]---地址
	 * 					arr[0][0]----默认值0
	 * 				int[][] arr = new int[3][]
	 * 					arr[0]--null
	 * 					arr[00][]---空指针异常
	 * 			⑦内存解析
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 