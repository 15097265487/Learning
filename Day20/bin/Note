 * java.lang.Throwable
 * 		|--->java.long.Error:һ�㲻��д����Դ���������
 * 		|--->java.lang.Exception�����Խ����쳣����
 * 			|---����ʱ�쳣(�ܼ�)
 * 				|---IOException
 * 					|---FileNotFoundException
 * 				|---ClassNotFoundException
 * 			|---����ʱ�쳣(unchecked��RuntimeException)���ܼ�
 * 				|---NullPointerException
 * 				|---ArrayIndexOutOfBoundsException
 * 				|---ClassCastException
 * 				|---NumberFormatException
 * 				|---InputMismatchException
 
  * 异常处理：抓抛模型
 * "抛"：程序在执行的过程中，一旦出现异常就会在异常的代码处生一个对应的异常类对象，并将对象抛出。一旦抛出对象以后，其后面的代码就不再执行。
 * "抓"：可以理解为异常的处理方式
 * 
 * 	说明：
 * 		1.finally是可选的。
 * 		2.使用try将可能出现异常的代码包起来，在执行的过程中，一旦出现异常，就会产生一个异常类的对象，(try{}后面的代码不再执行)根据对象的类型，与catch中进行匹配。
 * 		3.一旦try中的异常对象匹配到某一个catch，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch（在未写finally），继续执行其后代码
 * 		4.catch中的异常类型如果没有子父类关系。则声明先后顺序。若存在子父关系，则要求子类一定在父类上面。否则编译错误
 * 		5.try中声明的变量，只能在try{}中使用，出了try结构后，就不能在被调用访问
 * 		6.try-catch-finally可以嵌套使用
 * 		7.常用的异常类型兑现的处理方式：
 * 			①String getMessage()
 * 			②void printStackTrace()
 * 		1.使用try-catch-finally处理编译时异常，是使的程序在编译时不报错，但运行时仍可能报错，相当于我们使用try-catch-finally将编译时可能出行异常，
 * 			延迟到运行时出现	
 * 		2.开发时，由于异常比较常见，所以我们通常不针对运行时异常编写try-catch-finally，针对编译时异常，就一定要考虑到异常的处理
 
 
 * try-catch-finally
 * 	1.finally可选的
 * 	2.finally中声明的代码就一定会执行
 * 		即使try或catch中return，也会先执行finally，try或catch中出现异常，也会执行finally
 * 	3.向数据库连接，输入输出流，网络编程，scorket等资源的释放，关闭操作，就需要声明finally中
 * 	
 * 	final、finally、finalize的区别
 * 	final可以用于修饰变量，方法，类，被修饰的变量的值不能被改变，被修饰的方法不能被重写，被修饰的类不能被继承，它和abstract是反义词
	finally通常放在try…catch…的后面构造总是执行代码块，这就意味着程序无论正常运行还是发生异常，这里的代码只要JVM不关闭都会执行，可以将释放外部资源的代码写在finally块中
	finalize：Object类的方法，Java中允许使用finalize()方法在垃圾回收器将对象从内存中清除出去之前做必要的清理工作，这个方法是由垃圾回收器在销毁对象时调用的，通过重写finalize()方法可以整理系统资源或者执行其他清理工作
 * 
 * 	如何自定义异常类
 * 		1.继承现有的异常结构：RuntimeException Exception
 * 		2.提供全局常量：serialVersionUID
 * 		3.提供重载构造器
 
 
 * 	异常处理的第二种方式：throws+异常类型
 * 		1.throws+异常类型   写在方法的声明处，方法名后面。可能或抛出异常
 * 			一旦当方法执行的时候，出现异常，仍会在异常的位置生成一个异常的对象，此对象满足throws后的异常类型，就会抛出。
 * 			异常后面的代码就不会执行！
 * 		2.throws的方式只是将异常抛给了方法的调用者，比没有正真将异常处理掉
 * 			try-catch-finally真正地将异常处理掉了
 * 		3.开发中如何选择try-catch-finally，还是throws尼？
 * 			3.1执行方法m3()时，先后调用了其他方法，这几个方法的关系是递进关系执行的。此时建议另外几个方法使用throws方式进行处理
 * 			3.2而执行的方法m3()可以考虑try-catch-finally方法进行处理
 * 		4.子类重写方法抛出的异常不大于父类抛出的异常，如果父类方法未抛出异常，则子类方法不能抛出异常，若子类的方法中有异常出现，则必须使用try-catch-finally方式处理