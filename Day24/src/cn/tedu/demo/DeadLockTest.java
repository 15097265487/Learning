package cn.tedu.demo;
/**
 * 	死锁：
 * 		不同线程分别占用对方需要的同步资源不放弃，都在等待对方发放弃自己需要的同步资源，就形成线程的死锁
 * 		出现死锁，不会出现异常，
 * 	1.理解：
 * 		不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了死锁。
 * 	2.说明：
 * 		2.1出现死锁，不会出现异常，不会出现提示，只是线路都在处于阻塞状态，无法继续执行
 * 		2.2使用同步时，避免出现死锁
 * 		2.3尽量避免同步资源的定义
 * 		2.4尽量避免嵌套同步
 * 		
 **/

public class DeadLockTest {
	public static void main(String[] args) {
		StringBuffer s1 = new StringBuffer();
		StringBuffer s2 = new StringBuffer();
		new Thread() {
			@Override
			public void run() {
				synchronized (s1) {
					s1.append("a");
					s2.append("1");
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					synchronized (s2) {
						s1.append("b");
						s2.append("2");
						System.out.println(s1);
						System.out.println(s2);
					}
				}
			}
		}.start();
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				synchronized (s2) {
					s1.append("c");
					s2.append("3");
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					synchronized (s1) {
						s1.append("d");
						s2.append("4");
						System.out.println(s1);
						System.out.println(s2);
					}
				}
			}
		}).start();
	}
}
