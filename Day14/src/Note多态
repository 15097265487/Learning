面向对象的特征之三： 多态性
 * 	一个事物的多种形态
 * 
 * 	2.对象的多态性：父类的引用指向子类的对象，或将子类的对象赋值给父类的引用(向上转型)       引用的可以调用父类中声明的方法和属性，不能调用子类特有的属性行为
 * 	3.对态的使用：
 * 			虚拟方法调用：有了对象的多态性后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类中重写的父类的方法。
 * 	4.总结：编译看左边，运行时看右边(只适用方法)   
 		（引用的父类）   （new的子类对象）
 * 		      使用前提：①类的继承关系，②方法的重写
 * 	5.对象的多态性只适用于方法，不适用于属性，
 * 		（成员变量不具备多态性）=属性：编译和运行都看左边
 
转型：		 
	向上转型：（多态）父类引用指向子类的对象
	如何调用子类特有的属性和方法
	向下转型：父类型引用----->子类型引用
		Person p=new Student();
		Man m=(Man)p;
		使用向下转型时(强转)，可能会ClassCastException异常
		instanceof关键字的使用
		 * 格式：对象 instanceof 类名
		 * 		判断对象对象是否是类的实例
		 * 		如果是，返回true
		 * 		如果不是，返回false

有了这个多态后，内存中实际上加载了子类特有的属性和方法，。
	编译时，只能调用父类中声明的属性和方法，子类中特有的方法和属性不能调用  
	
绑定：	
	+而对于多态，只要等到方法调用的那一刻，解释运行器才会确定做调用的具体方法，这成为“晚绑定”动态绑定
	对重载而言，在方法调用之前，编译器已经确定了所调用的方法，这称为早绑定，静态绑定	
		
		
		